import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { IntersectionStatus } from './observables/from-intersection-observer';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./directives/intersection-observer.directive";
export var MarqueeState;
(function (MarqueeState) {
    MarqueeState["Running"] = "running";
    MarqueeState["Paused"] = "paused";
    MarqueeState["Stopped"] = "stopped";
})(MarqueeState || (MarqueeState = {}));
export var MarqueeDirection;
(function (MarqueeDirection) {
    MarqueeDirection["Left"] = "left";
    MarqueeDirection["Right"] = "right";
    MarqueeDirection["Alternate"] = "alternate";
})(MarqueeDirection || (MarqueeDirection = {}));
export var MarqueeAnimation;
(function (MarqueeAnimation) {
    MarqueeAnimation["Default"] = "default";
    MarqueeAnimation["SlideInUp"] = "slideInUp";
    MarqueeAnimation["SlideInDown"] = "slideInDown";
})(MarqueeAnimation || (MarqueeAnimation = {}));
export class NgxMarqueeComponent {
    constructor(_renderer) {
        this._renderer = _renderer;
        this._outerFlags = [false, false];
        this.debounce = 0;
        this.root = undefined;
        this.rootMargin = '0px';
        this.threshold = 0;
        this.duration = '20s';
        this.animation = MarqueeAnimation.Default;
        this.pauseOnHover = false;
        this.pendingUpdates = false;
        this.pendingUpdatesChange = new EventEmitter();
        this.playStateChange = new EventEmitter();
        if (typeof this.taskOnUpdateContent !== 'function') {
            this.taskOnUpdateContent = () => { };
        }
        if (typeof this.taskOnUpdateDuration !== 'function') {
            this.taskOnUpdateDuration = () => {
                return this.duration;
            };
        }
    }
    ngAfterViewInit() {
        this._elementMarquee = this._renderer.selectRootElement(this.tape, true).nativeElement;
        this._resetMarquee();
    }
    playPause() {
        if (this._dataPlayState === null || this._dataPlayState === MarqueeState.Running) {
            this._pauseElement();
        }
        else {
            this._playElement();
        }
    }
    stop() {
        this._resetAnimation();
        this._stopElement();
    }
    restart() {
        this._resetAnimation();
        this._playElement();
    }
    onVisibilityChanged(status, control) {
        if (status !== IntersectionStatus.Pending) {
            if (status === IntersectionStatus.Visible) {
                this._outerFlags[control] = true;
            }
            else if (status === IntersectionStatus.NotVisible) {
                this._outerFlags[control] = false;
            }
            if (this.pendingUpdates) {
                if ((this.direction === undefined || this.direction === MarqueeDirection.Left) && (this._outerFlags[0] === true && this._outerFlags[1] === false)) {
                    this._execProcedure();
                }
                else if (this.direction === MarqueeDirection.Right && (this._outerFlags[0] === false && this._outerFlags[1] === true)) {
                    this._execProcedure();
                }
            }
        }
    }
    _execProcedure() {
        this.taskOnUpdateContent();
        this._resetMarquee();
        this._setPendingUpdates(false);
    }
    _setDataPlayState(state) {
        this._dataPlayState = state;
        this.playStateChange.emit(this._dataPlayState);
    }
    _setPendingUpdates(state) {
        this.pendingUpdates = state;
        this.pendingUpdatesChange.emit(this.pendingUpdates);
    }
    _resetMarquee() {
        this.stop();
        this._calculateDuration();
        this._playElement();
    }
    _calculateDuration() {
        this.duration = this.taskOnUpdateDuration();
    }
    _playElement() {
        this._setAnimationState('running', true);
        this._setDataAttrState('running');
        this._setDataPlayState(MarqueeState.Running);
    }
    _pauseElement() {
        this._setAnimationState('paused');
        this._setDataAttrState('paused');
        this._setDataPlayState(MarqueeState.Paused);
    }
    _stopElement() {
        this._setAnimationState('paused');
        this._setDataAttrState('stopped');
        this._setDataPlayState(MarqueeState.Stopped);
        this._setPendingUpdates(false);
    }
    _setAnimationState(state = '', fix = false) {
        this._renderer.setStyle(this._elementMarquee, 'animation-play-state', state);
        if (fix) {
            this._fixAnimationState();
        }
    }
    _resetAnimation() {
        this._renderer.setStyle(this._elementMarquee, 'animation', 'none');
        let fix = this._elementMarquee.offsetWidth;
        fix = fix;
        this._renderer.setStyle(this._elementMarquee, 'animation', `${this.duration} linear infinite`);
        this._renderer.setStyle(this._elementMarquee, '-webkit-animation', `${this.duration} linear infinite`);
        switch (this.direction) {
            case 'alternate':
                this._renderer.setStyle(this._elementMarquee, 'animation-direction', 'alternate');
                break;
            default:
                this._renderer.setStyle(this._elementMarquee, 'animation-direction', 'normal');
                break;
        }
        if (this.direction !== MarqueeDirection.Alternate) {
            if (this.direction === undefined || this.direction === MarqueeDirection.Left) {
                if (this.animation === MarqueeAnimation.SlideInUp) {
                    this._renderer.setStyle(this._elementMarquee, 'animation-name', 'slide-in-up');
                }
                else if (this.animation === MarqueeAnimation.SlideInDown) {
                    this._renderer.setStyle(this._elementMarquee, 'animation-name', 'slide-in-down');
                }
                else {
                    this._renderer.setStyle(this._elementMarquee, 'animation-name', 'movement-smooth');
                }
            }
            else if (this.direction === MarqueeDirection.Right) {
                if (this.animation === MarqueeAnimation.SlideInUp) {
                    this._renderer.setStyle(this._elementMarquee, 'animation-name', 'slide-in-up-right');
                }
                else if (this.animation === MarqueeAnimation.SlideInDown) {
                    this._renderer.setStyle(this._elementMarquee, 'animation-name', 'slide-in-down-right');
                }
                else {
                    this._renderer.setStyle(this._elementMarquee, 'animation-direction', 'reverse');
                    this._renderer.setStyle(this._elementMarquee, 'animation-name', 'movement-smooth');
                }
            }
        }
        else {
            this._renderer.setStyle(this._elementMarquee, 'animation-name', 'movement-smooth');
        }
    }
    _setDataAttrState(state = '') {
        this._renderer.setAttribute(this._elementMarquee, 'data-play-state', state);
    }
    _fixAnimationState() {
        this._renderer.removeStyle(this._elementMarquee, 'animation-play-state');
    }
}
NgxMarqueeComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: NgxMarqueeComponent, deps: [{ token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });
NgxMarqueeComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "13.2.0", type: NgxMarqueeComponent, selector: "ngx-marquee", inputs: { direction: "direction", duration: "duration", pauseOnHover: "pauseOnHover", animation: "animation", taskOnUpdateContent: "taskOnUpdateContent", taskOnUpdateDuration: "taskOnUpdateDuration", pendingUpdates: "pendingUpdates" }, outputs: { pendingUpdatesChange: "pendingUpdatesChange", playStateChange: "playStateChange" }, viewQueries: [{ propertyName: "tape", first: true, predicate: ["tape"], descendants: true }], ngImport: i0, template: "<div class=\"ngx-marquee\" [ngClass]=\"{'ngx-marquee-pause-on-hover': pauseOnHover}\">\r\n    <span #tape>\r\n        <span class=\"ticker-control ticker-start\" \r\n            intersectionObserver\r\n            [intersectionRoot]=\"root\"\r\n            [intersectionRootMargin]=\"rootMargin\"\r\n            [intersectionThreshold]=\"threshold\"\r\n            [intersectionDebounce]=\"debounce\"\r\n            (visibilityChange)=\"onVisibilityChanged($event, 0)\">L</span>\r\n        <span class=\"tickers\">\r\n            <ng-content></ng-content>\r\n        </span>\r\n        <span class=\"ticker-control ticker-end\"\r\n            intersectionObserver\r\n            [intersectionRoot]=\"root\"\r\n            [intersectionRootMargin]=\"rootMargin\"\r\n            [intersectionThreshold]=\"threshold\"\r\n            [intersectionDebounce]=\"debounce\"\r\n            (visibilityChange)=\"onVisibilityChanged($event, 1)\">R</span>\r\n    </span>\r\n</div>", styles: [".ngx-marquee{overflow:hidden;text-align:left}.ngx-marquee.ngx-marquee-pause-on-hover:hover>span{animation-play-state:paused}.ngx-marquee>span{content:attr(data-marquee);display:inline-block;position:relative;white-space:nowrap;animation:linear infinite}.ngx-marquee>span{animation-duration:20s}.ngx-marquee>span{animation-direction:normal}.ngx-marquee span.ticker-control{display:inline-block;width:20px;text-align:center;color:transparent;background-color:transparent}.ngx-marquee.ngx-marquee-direction-left>span,.ngx-marquee.ngx-marquee-direction-normal>span{animation-direction:normal}@keyframes movement-smooth{0%{transform:translate(0);left:100%}to{transform:translate(-100%);left:0%}}@keyframes slide-in-up{0%{transform:translateY(100%);left:0%}10%{transform:translateY(0);left:0%}16%{transform:translate(0)}to{transform:translate(-100%);left:0%}}@keyframes slide-in-down{0%{transform:translateY(-100%);left:0%}10%{transform:translateY(0);left:0%}16%{transform:translate(0)}to{transform:translate(-100%);left:0%}}@keyframes slide-in-up-right{0%{transform:translate(-100%,100%);right:-100%}10%{transform:translate(-100%);right:-100%}16%{transform:translate(-100%)}to{transform:translate(0);right:-100%}}@keyframes slide-in-down-right{0%{transform:translate(-100%,-100%);right:-100%}10%{transform:translate(-100%);right:-100%}16%{transform:translate(-100%)}to{transform:translate(0);right:-100%}}\n"], directives: [{ type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { type: i2.IntersectionObserverDirective, selector: "[intersectionObserver]", inputs: ["intersectionDebounce", "intersectionRootMargin", "intersectionRoot", "intersectionThreshold"], outputs: ["visibilityChange"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: NgxMarqueeComponent, decorators: [{
            type: Component,
            args: [{ selector: 'ngx-marquee', changeDetection: ChangeDetectionStrategy.OnPush, template: "<div class=\"ngx-marquee\" [ngClass]=\"{'ngx-marquee-pause-on-hover': pauseOnHover}\">\r\n    <span #tape>\r\n        <span class=\"ticker-control ticker-start\" \r\n            intersectionObserver\r\n            [intersectionRoot]=\"root\"\r\n            [intersectionRootMargin]=\"rootMargin\"\r\n            [intersectionThreshold]=\"threshold\"\r\n            [intersectionDebounce]=\"debounce\"\r\n            (visibilityChange)=\"onVisibilityChanged($event, 0)\">L</span>\r\n        <span class=\"tickers\">\r\n            <ng-content></ng-content>\r\n        </span>\r\n        <span class=\"ticker-control ticker-end\"\r\n            intersectionObserver\r\n            [intersectionRoot]=\"root\"\r\n            [intersectionRootMargin]=\"rootMargin\"\r\n            [intersectionThreshold]=\"threshold\"\r\n            [intersectionDebounce]=\"debounce\"\r\n            (visibilityChange)=\"onVisibilityChanged($event, 1)\">R</span>\r\n    </span>\r\n</div>", styles: [".ngx-marquee{overflow:hidden;text-align:left}.ngx-marquee.ngx-marquee-pause-on-hover:hover>span{animation-play-state:paused}.ngx-marquee>span{content:attr(data-marquee);display:inline-block;position:relative;white-space:nowrap;animation:linear infinite}.ngx-marquee>span{animation-duration:20s}.ngx-marquee>span{animation-direction:normal}.ngx-marquee span.ticker-control{display:inline-block;width:20px;text-align:center;color:transparent;background-color:transparent}.ngx-marquee.ngx-marquee-direction-left>span,.ngx-marquee.ngx-marquee-direction-normal>span{animation-direction:normal}@keyframes movement-smooth{0%{transform:translate(0);left:100%}to{transform:translate(-100%);left:0%}}@keyframes slide-in-up{0%{transform:translateY(100%);left:0%}10%{transform:translateY(0);left:0%}16%{transform:translate(0)}to{transform:translate(-100%);left:0%}}@keyframes slide-in-down{0%{transform:translateY(-100%);left:0%}10%{transform:translateY(0);left:0%}16%{transform:translate(0)}to{transform:translate(-100%);left:0%}}@keyframes slide-in-up-right{0%{transform:translate(-100%,100%);right:-100%}10%{transform:translate(-100%);right:-100%}16%{transform:translate(-100%)}to{transform:translate(0);right:-100%}}@keyframes slide-in-down-right{0%{transform:translate(-100%,-100%);right:-100%}10%{transform:translate(-100%);right:-100%}16%{transform:translate(-100%)}to{transform:translate(0);right:-100%}}\n"] }]
        }], ctorParameters: function () { return [{ type: i0.Renderer2 }]; }, propDecorators: { direction: [{
                type: Input
            }], duration: [{
                type: Input
            }], pauseOnHover: [{
                type: Input
            }], animation: [{
                type: Input
            }], taskOnUpdateContent: [{
                type: Input
            }], taskOnUpdateDuration: [{
                type: Input
            }], pendingUpdates: [{
                type: Input
            }], pendingUpdatesChange: [{
                type: Output
            }], playStateChange: [{
                type: Output
            }], tape: [{
                type: ViewChild,
                args: ["tape"]
            }] } });
//# sourceMappingURL=data:application/json;base64,