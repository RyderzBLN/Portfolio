import { Directive, EventEmitter, Input, Output } from '@angular/core';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { fromIntersectionObserver } from '../observables/from-intersection-observer';
import * as i0 from "@angular/core";
export class IntersectionObserverDirective {
    constructor(_element) {
        this._element = _element;
        this.intersectionDebounce = 0;
        this.intersectionRootMargin = '0px';
        this.visibilityChange = new EventEmitter();
        this._destroy$ = new Subject();
    }
    ngOnInit() {
        const element = this._element.nativeElement;
        const config = {
            root: this.intersectionRoot,
            rootMargin: this.intersectionRootMargin,
            threshold: this.intersectionThreshold
        };
        fromIntersectionObserver(element, config, this.intersectionDebounce)
            .pipe(takeUntil(this._destroy$))
            .subscribe(status => {
            this.visibilityChange.emit(status);
        });
    }
    ngOnDestroy() {
        this._destroy$.next(void 0);
    }
}
IntersectionObserverDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: IntersectionObserverDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
IntersectionObserverDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "12.0.0", version: "13.2.0", type: IntersectionObserverDirective, selector: "[intersectionObserver]", inputs: { intersectionDebounce: "intersectionDebounce", intersectionRootMargin: "intersectionRootMargin", intersectionRoot: "intersectionRoot", intersectionThreshold: "intersectionThreshold" }, outputs: { visibilityChange: "visibilityChange" }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "13.2.0", ngImport: i0, type: IntersectionObserverDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[intersectionObserver]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { intersectionDebounce: [{
                type: Input
            }], intersectionRootMargin: [{
                type: Input
            }], intersectionRoot: [{
                type: Input
            }], intersectionThreshold: [{
                type: Input
            }], visibilityChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW50ZXJzZWN0aW9uLW9ic2VydmVyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL25neC1tYXJxdWVlL3NyYy9saWIvZGlyZWN0aXZlcy9pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuZGlyZWN0aXZlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQWMsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RHLE9BQU8sRUFBRSxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDL0IsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSx3QkFBd0IsRUFBc0IsTUFBTSwyQ0FBMkMsQ0FBQzs7QUFLekcsTUFBTSxPQUFPLDZCQUE2QjtJQVd4QyxZQUFxQixRQUFvQjtRQUFwQixhQUFRLEdBQVIsUUFBUSxDQUFZO1FBVGhDLHlCQUFvQixHQUFHLENBQUMsQ0FBQztRQUN6QiwyQkFBc0IsR0FBRyxLQUFLLENBQUM7UUFJOUIscUJBQWdCLEdBQUcsSUFBSSxZQUFZLEVBQXNCLENBQUM7UUFFNUQsY0FBUyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7SUFFWSxDQUFDO0lBRS9DLFFBQVE7UUFFTixNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQztRQUU1QyxNQUFNLE1BQU0sR0FBRztZQUNiLElBQUksRUFBRSxJQUFJLENBQUMsZ0JBQWdCO1lBQzNCLFVBQVUsRUFBRSxJQUFJLENBQUMsc0JBQXNCO1lBQ3ZDLFNBQVMsRUFBRSxJQUFJLENBQUMscUJBQXFCO1NBQ3RDLENBQUM7UUFFRix3QkFBd0IsQ0FDdEIsT0FBTyxFQUNQLE1BQU0sRUFDTixJQUFJLENBQUMsb0JBQW9CLENBQzFCO2FBQ0EsSUFBSSxDQUNILFNBQVMsQ0FBRSxJQUFJLENBQUMsU0FBUyxDQUFFLENBQzVCO2FBQ0EsU0FBUyxDQUFFLE1BQU0sQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDO0lBRUQsV0FBVztRQUVULElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQzs7MEhBdkNVLDZCQUE2Qjs4R0FBN0IsNkJBQTZCOzJGQUE3Qiw2QkFBNkI7a0JBSHpDLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtpQkFDbkM7aUdBR1Usb0JBQW9CO3NCQUE1QixLQUFLO2dCQUNHLHNCQUFzQjtzQkFBOUIsS0FBSztnQkFDRyxnQkFBZ0I7c0JBQXhCLEtBQUs7Z0JBQ0cscUJBQXFCO3NCQUE3QixLQUFLO2dCQUVJLGdCQUFnQjtzQkFBekIsTUFBTSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFrZVVudGlsIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgZnJvbUludGVyc2VjdGlvbk9ic2VydmVyLCBJbnRlcnNlY3Rpb25TdGF0dXMgfSBmcm9tICcuLi9vYnNlcnZhYmxlcy9mcm9tLWludGVyc2VjdGlvbi1vYnNlcnZlcic7XG5cbkBEaXJlY3RpdmUoe1xuICBzZWxlY3RvcjogJ1tpbnRlcnNlY3Rpb25PYnNlcnZlcl0nXG59KVxuZXhwb3J0IGNsYXNzIEludGVyc2VjdGlvbk9ic2VydmVyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0LCBPbkRlc3Ryb3kge1xuXG4gIEBJbnB1dCgpIGludGVyc2VjdGlvbkRlYm91bmNlID0gMDtcbiAgQElucHV0KCkgaW50ZXJzZWN0aW9uUm9vdE1hcmdpbiA9ICcwcHgnO1xuICBASW5wdXQoKSBpbnRlcnNlY3Rpb25Sb290OiBIVE1MRWxlbWVudDtcbiAgQElucHV0KCkgaW50ZXJzZWN0aW9uVGhyZXNob2xkOiBudW1iZXIgfCBudW1iZXJbXTtcbiAgXG4gIEBPdXRwdXQoKSB2aXNpYmlsaXR5Q2hhbmdlID0gbmV3IEV2ZW50RW1pdHRlcjxJbnRlcnNlY3Rpb25TdGF0dXM+KCk7XG4gIFxuICBwcml2YXRlIF9kZXN0cm95JCA9IG5ldyBTdWJqZWN0KCk7XG5cbiAgY29uc3RydWN0b3IoIHByaXZhdGUgX2VsZW1lbnQ6IEVsZW1lbnRSZWYgKSB7IH1cblxuICBuZ09uSW5pdCgpXG4gIHtcbiAgICBjb25zdCBlbGVtZW50ID0gdGhpcy5fZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgIFxuICAgIGNvbnN0IGNvbmZpZyA9IHtcbiAgICAgIHJvb3Q6IHRoaXMuaW50ZXJzZWN0aW9uUm9vdCxcbiAgICAgIHJvb3RNYXJnaW46IHRoaXMuaW50ZXJzZWN0aW9uUm9vdE1hcmdpbixcbiAgICAgIHRocmVzaG9sZDogdGhpcy5pbnRlcnNlY3Rpb25UaHJlc2hvbGRcbiAgICB9O1xuXG4gICAgZnJvbUludGVyc2VjdGlvbk9ic2VydmVyKFxuICAgICAgZWxlbWVudCxcbiAgICAgIGNvbmZpZyxcbiAgICAgIHRoaXMuaW50ZXJzZWN0aW9uRGVib3VuY2VcbiAgICApXG4gICAgLnBpcGUoXG4gICAgICB0YWtlVW50aWwoIHRoaXMuX2Rlc3Ryb3kkIClcbiAgICApXG4gICAgLnN1YnNjcmliZSggc3RhdHVzID0+IHtcbiAgICAgIHRoaXMudmlzaWJpbGl0eUNoYW5nZS5lbWl0KHN0YXR1cyk7XG4gICAgfSk7XG4gIH1cbiAgXG4gIG5nT25EZXN0cm95KClcbiAge1xuICAgIHRoaXMuX2Rlc3Ryb3kkLm5leHQodm9pZCAwKTtcbiAgfVxuXG59XG4iXX0=