import { Observable, Subject } from "rxjs";
import { debounceTime, filter } from "rxjs/operators";
export var IntersectionStatus;
(function (IntersectionStatus) {
    IntersectionStatus["Visible"] = "Visible";
    IntersectionStatus["Pending"] = "Pending";
    IntersectionStatus["NotVisible"] = "NotVisible";
})(IntersectionStatus || (IntersectionStatus = {}));
export const fromIntersectionObserver = (element, config, debounce = 0) => new Observable(subscriber => {
    const subject$ = new Subject();
    const intersectionObserver = new IntersectionObserver((entries, observer) => {
        entries.forEach(entry => {
            subject$.next({ entry, observer });
        });
    }, config);
    subject$.subscribe(() => {
        subscriber.next(IntersectionStatus.Pending);
    });
    subject$.pipe(debounceTime(debounce), filter(Boolean))
        .subscribe(async ({ entry, observer }) => {
        const isEntryVisible = await isVisible(entry.target);
        if (isEntryVisible) {
            subscriber.next(IntersectionStatus.Visible);
        }
        else {
            subscriber.next(IntersectionStatus.NotVisible);
        }
    });
    intersectionObserver.observe(element);
    return {
        unsubscribe() {
            intersectionObserver.disconnect();
            subject$.unsubscribe();
        }
    };
});
async function isVisible(element) {
    return new Promise(resolve => {
        const observer = new IntersectionObserver(([entry]) => {
            resolve(entry.isIntersecting);
            observer.disconnect();
        });
        observer.observe(element);
    });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZnJvbS1pbnRlcnNlY3Rpb24tb2JzZXJ2ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtbWFycXVlZS9zcmMvbGliL29ic2VydmFibGVzL2Zyb20taW50ZXJzZWN0aW9uLW9ic2VydmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFdEQsTUFBTSxDQUFOLElBQVksa0JBSVg7QUFKRCxXQUFZLGtCQUFrQjtJQUMxQix5Q0FBbUIsQ0FBQTtJQUNuQix5Q0FBbUIsQ0FBQTtJQUNuQiwrQ0FBeUIsQ0FBQTtBQUM3QixDQUFDLEVBSlcsa0JBQWtCLEtBQWxCLGtCQUFrQixRQUk3QjtBQUVELE1BQU0sQ0FBQyxNQUFNLHdCQUF3QixHQUFHLENBQUUsT0FBb0IsRUFBRSxNQUFnQyxFQUFFLFFBQVEsR0FBRyxDQUFDLEVBQUcsRUFBRSxDQUMvRyxJQUFJLFVBQVUsQ0FBc0IsVUFBVSxDQUFDLEVBQUU7SUFDN0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxPQUFPLEVBR3hCLENBQUM7SUFFTCxNQUFNLG9CQUFvQixHQUFHLElBQUksb0JBQW9CLENBQUUsQ0FBQyxPQUFPLEVBQUUsUUFBUSxFQUFFLEVBQUU7UUFDekUsT0FBTyxDQUFDLE9BQU8sQ0FBRSxLQUFLLENBQUMsRUFBRTtZQUNyQixRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDdkMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLEVBQ0QsTUFBTSxDQUNQLENBQUM7SUFFRixRQUFRLENBQUMsU0FBUyxDQUFFLEdBQUcsRUFBRTtRQUNyQixVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO0lBQ2hELENBQUMsQ0FBQyxDQUFDO0lBRUgsUUFBUSxDQUFDLElBQUksQ0FDVCxZQUFZLENBQUMsUUFBUSxDQUFDLEVBQ3RCLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FDbEI7U0FDQSxTQUFTLENBQUUsS0FBSyxFQUFDLEVBQUUsS0FBSyxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUU7UUFDckMsTUFBTSxjQUFjLEdBQUcsTUFBTSxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQXFCLENBQUMsQ0FBQztRQUNwRSxJQUFJLGNBQWMsRUFDbEI7WUFDRSxVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxDQUFDO1NBQzdDO2FBRUQ7WUFDRSxVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLFVBQVUsQ0FBQyxDQUFDO1NBQ2hEO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7SUFFdEMsT0FBTztRQUNILFdBQVc7WUFDUCxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsQ0FBQztZQUNsQyxRQUFRLENBQUMsV0FBVyxFQUFFLENBQUM7UUFDM0IsQ0FBQztLQUNKLENBQUM7QUFDVixDQUFDLENBQUMsQ0FBQztBQUVILEtBQUssVUFBVSxTQUFTLENBQUUsT0FBb0I7SUFFMUMsT0FBTyxJQUFJLE9BQU8sQ0FBRSxPQUFPLENBQUMsRUFBRTtRQUMxQixNQUFNLFFBQVEsR0FBRyxJQUFJLG9CQUFvQixDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFBRSxFQUFFO1lBQ2xELE9BQU8sQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLENBQUM7WUFDOUIsUUFBUSxDQUFDLFVBQVUsRUFBRSxDQUFDO1FBQzFCLENBQUMsQ0FBQyxDQUFDO1FBRUgsUUFBUSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztJQUM5QixDQUFDLENBQUMsQ0FBQztBQUNQLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBPYnNlcnZhYmxlLCBTdWJqZWN0IH0gZnJvbSBcInJ4anNcIjtcclxuaW1wb3J0IHsgZGVib3VuY2VUaW1lLCBmaWx0ZXIgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcclxuXHJcbmV4cG9ydCBlbnVtIEludGVyc2VjdGlvblN0YXR1cyB7XHJcbiAgICBWaXNpYmxlID0gJ1Zpc2libGUnLFxyXG4gICAgUGVuZGluZyA9ICdQZW5kaW5nJyxcclxuICAgIE5vdFZpc2libGUgPSAnTm90VmlzaWJsZSdcclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IGZyb21JbnRlcnNlY3Rpb25PYnNlcnZlciA9ICggZWxlbWVudDogSFRNTEVsZW1lbnQsIGNvbmZpZzogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJJbml0LCBkZWJvdW5jZSA9IDAgKSA9PiBcclxuICAgIG5ldyBPYnNlcnZhYmxlPEludGVyc2VjdGlvblN0YXR1cz4oIHN1YnNjcmliZXIgPT4ge1xyXG4gICAgICAgIGNvbnN0IHN1YmplY3QkID0gbmV3IFN1YmplY3Q8e1xyXG4gICAgICAgICAgICBlbnRyeTogSW50ZXJzZWN0aW9uT2JzZXJ2ZXJFbnRyeTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXI6IEludGVyc2VjdGlvbk9ic2VydmVyO1xyXG4gICAgICAgIH0+KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGludGVyc2VjdGlvbk9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKCAoZW50cmllcywgb2JzZXJ2ZXIpID0+IHtcclxuICAgICAgICAgICAgZW50cmllcy5mb3JFYWNoKCBlbnRyeSA9PiB7XHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0JC5uZXh0KHsgZW50cnksIG9ic2VydmVyIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBjb25maWdcclxuICAgICAgICApO1xyXG5cclxuICAgICAgICBzdWJqZWN0JC5zdWJzY3JpYmUoICgpID0+IHtcclxuICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KEludGVyc2VjdGlvblN0YXR1cy5QZW5kaW5nKTtcclxuICAgICAgICB9KTtcclxuICAgIFxyXG4gICAgICAgIHN1YmplY3QkLnBpcGUoXHJcbiAgICAgICAgICAgIGRlYm91bmNlVGltZShkZWJvdW5jZSksXHJcbiAgICAgICAgICAgIGZpbHRlcihCb29sZWFuKVxyXG4gICAgICAgIClcclxuICAgICAgICAuc3Vic2NyaWJlKCBhc3luYyh7IGVudHJ5LCBvYnNlcnZlciB9KSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzRW50cnlWaXNpYmxlID0gYXdhaXQgaXNWaXNpYmxlKGVudHJ5LnRhcmdldCBhcyBIVE1MRWxlbWVudCk7XHJcbiAgICAgICAgICAgIGlmIChpc0VudHJ5VmlzaWJsZSlcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChJbnRlcnNlY3Rpb25TdGF0dXMuVmlzaWJsZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KEludGVyc2VjdGlvblN0YXR1cy5Ob3RWaXNpYmxlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xyXG4gICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdW5zdWJzY3JpYmUoKSB7XHJcbiAgICAgICAgICAgICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5kaXNjb25uZWN0KCk7XHJcbiAgICAgICAgICAgICAgICBzdWJqZWN0JC51bnN1YnNjcmliZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxufSk7XHJcblxyXG5hc3luYyBmdW5jdGlvbiBpc1Zpc2libGUoIGVsZW1lbnQ6IEhUTUxFbGVtZW50IClcclxue1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKCByZXNvbHZlID0+IHtcclxuICAgICAgICBjb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcigoW2VudHJ5XSkgPT4ge1xyXG4gICAgICAgICAgICByZXNvbHZlKGVudHJ5LmlzSW50ZXJzZWN0aW5nKTtcclxuICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBvYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQpO1xyXG4gICAgfSk7XHJcbn0iXX0=